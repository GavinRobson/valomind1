generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  username String?
  name     String?
  email    String @db.Text

  valorantProfile ValorantProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id      String @id @default(uuid())
  matchId String
  mode String
  matchDate DateTime
  red_rounds Int?
  blue_rounds Int?
  player_team String?
  won Boolean?
  act String
  overview    Json

  valorantProfileId String
  valorantProfile ValorantProfile @relation(fields: [valorantProfileId], references: [profileId])

  @@index([valorantProfileId])
}

model ValorantProfile {
  id            String @id @default(uuid())
  username      String
  tag           String
  region        String
  puuid         String 
  stats ValorantStats?

  matches Match[]

  profileId String  @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ValorantStats {
  id String @id @default(uuid()) 

  favoriteAgent String?
  headhit Float?
  favoriteWeapon String?
  map MapStats[]
  kills Int?
  deaths Int?
  assists Int?
  currentRank Int?
  currentLevel Int?
  killDeath Float?
  damageGame Float?
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  valorantProfileId String @unique
  valorantProfile ValorantProfile @relation(fields: [valorantProfileId], references: [id], onDelete: Cascade)
}

model MapStats {
  id String @id @default(uuid())

  mapName String?
  winRate Int?
  timesPlayed Int?
  wins Int?
  losses Int?

  valorantStatsId String @unique
  valorantStats ValorantStats @relation(fields: [valorantStatsId], references: [id])
}
